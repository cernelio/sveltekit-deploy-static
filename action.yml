name: "Deploy SvelteKit Static Sites"
description: "Builds a SvelteKit static site and deploys it via SSH (rsync) or FTP."
author: "cernel.io"

inputs:
  node-version:
    description: "Version of Node.js to use for build."
    required: false
    default: "lts/*" # Or '20', '18', etc.

  deploy-mode:
    description: "Deployment mode: 'ssh' or 'ftp'."
    required: true

  build-script:
    description: "Custom command to build the project. Defaults to 'npm run build'."
    required: false
    default: ''

  build-dir:
    description: "Where the built output lies"
    required: false
    default: ''

  protect:
    description: "Contents of the htpasswd file"
    required: false
    default: ''

  environment:
    description: "Environment variables content to write to /env/.env file"
    required: false
    default: ''

  server-ssh-host:
    description: "Hostname or IP address of the deployment server."
    required: false
  server-ssh-user:
    description: "Username for connecting to the deployment server."
    required: false
  server-ssh-key:
    description: "Private SSH key for connecting to the server (if deploy-mode is 'ssh')."
    required: false
  server-ssh-known-hosts:
    description: "Known hosts entry for the server (e.g., 'github.com ssh-rsa AAAA...')."
    required: false
  server-ssh-path:
    description: "Remote path on the server where files will be deployed."
    required: false

  server-ftp-host:
    description: "Hostname or IP address of the deployment server."
    required: false
  server-ftp-user:
    description: "Username for connecting to the deployment server."
    required: false
  server-ftp-password:
    description: "Password for FTP connection (if deploy-mode is 'ftp')."
    required: false
  server-ftp-dry-run:
    description: "Perform a dry run for FTP deployment (does not upload files)."
    required: false
    default: false
  server-ftp-path:
    description: "Remote path on the server where files will be deployed."
    required: false


runs:
  using: "composite"
  steps:

    - name: Validate Inputs
      shell: bash
      run: |
        set -e
        if [[ "${{ inputs.deploy-mode }}" == "ssh" ]]; then
          if [[ -z "${{ inputs.server-ssh-host }}" || \
                -z "${{ inputs.server-ssh-user }}" || \
                -z "${{ inputs.server-ssh-key }}" || \
                -z "${{ inputs.server-ssh-known-hosts }}" || \
                -z "${{ inputs.server-ssh-path }}" ]]; then
            echo "::error::For SSH deploy_mode, server-ssh-host, server-ssh-user, server-ssh-key, server-known-hosts, and server-ssh-path inputs are required."
            exit 1
          fi
          echo "SSH inputs validated."
        elif [[ "${{ inputs.deploy-mode }}" == "ftp" ]]; then
          if [[ -z "${{ inputs.server-ftp-host }}" || \
                -z "${{ inputs.server-ftp-user }}" || \
                -z "${{ inputs.server-ftp-password }}" ]]; then
            echo "::error::For FTP deploy_mode, server-ftp-host, server-ftp-user and server-ftp-password inputs are required."
            exit 1
          fi
          if [[ -n "${{ inputs.protect }}" ]]; then
            echo "::error::HTTP Basic Auth (using 'protect' input) is not supported for FTP deployment mode."
            exit 1
          fi
          echo "FTP inputs validated."
        else
          echo "::error::Invalid deploy_mode: ${{ inputs.deploy-mode }}. Must be 'ssh' or 'ftp'."
          exit 1
        fi

    - name: Prepare Build Directory Path
      shell: bash
      run: |
        TEMP_BUILD_DIR="${{ inputs.build-dir }}"
        
        if [[ -z "$TEMP_BUILD_DIR" ]]; then
          TEMP_BUILD_DIR="build"
        fi

        # Format it: ensure leading ./ and trailing /
        
        # Remove existing leading ./ if present to avoid ././
        TEMP_PATH="${TEMP_BUILD_DIR#./}"
        TEMP_PATH="${TEMP_PATH#/}"
        
        # Remove existing trailing / if present to avoid //
        TEMP_PATH="${TEMP_PATH%/}"

        FORMATTED_BUILD_DIR="./${TEMP_PATH}/"

        echo "Using build directory: ${FORMATTED_BUILD_DIR}"
        echo "BUILD_DIR=${FORMATTED_BUILD_DIR}" >> $GITHUB_ENV
        
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install and Configure Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        check-latest: true

    - name: Install Dependencies
      shell: bash
      run: |
        npm ci

    - name: Create Environment File
      shell: bash
      run: |   
        # Write the environment variables content to /env/.env
        if [[ -n "${{ inputs.environment }}" ]]; then          
          echo "Creating /env/.env file with provided environment variables"

          # Create the /env directory if it doesn't exist
          mkdir -p env
          
          echo "${{ inputs.environment }}" > env/.env
          
          echo "Environment file created successfully"
        else
          echo "No environment variables provided, skipping step."
        fi

    - name: Build the project
      shell: bash
      run: |
        SCRIPT="${{ inputs.build-script }}"
        
        if [[ -z "$SCRIPT" ]]; then
          SCRIPT="build"
        fi

        echo "Running build script: npm run $SCRIPT"
        npm run "$SCRIPT"

    - name: Generate HTTP Basic Auth
      if: inputs.deploy-mode == 'ssh' && inputs.protect != ''
      shell: bash
      env:
        # BUILD_DIR is available from GITHUB_ENV set in "Prepare Build Directory Path"
        HTPASSWD_CONTENT: ${{ inputs.protect }}
        SERVER_SSH_PATH: ${{ inputs.server-ssh-path }}
      run: |
        set -e
        echo "Configuring HTTP Basic Auth in build directory: ${{ env.BUILD_DIR }}"

        HTACCESS_FILE_PATH="${{ env.BUILD_DIR }}.htaccess"
        HTPASSWD_FILE_PATH="${{ env.BUILD_DIR }}.htpasswd"

        # Clean the server SSH path: remove trailing slashes for use in AuthUserFile
        # This path is the absolute path on the server where .htpasswd will reside.
        CLEANED_SERVER_SSH_PATH=$(echo "${SERVER_SSH_PATH}" | sed 's:/*$::')

        HTACCESS_AUTH_CONFIG="<FilesMatch \"(?<!403\\.html|\\.js|\\.css|\\.js\\.br|\\.css\\.br|\\.js\\.gz|\\.css\\.gz|logo\\.png|favicon\\.png)$\">
        AuthUserFile ${CLEANED_SERVER_SSH_PATH}/.htpasswd
        AuthName \"Password Protected\"
        AuthType Basic
        Order Deny,Allow
        Deny from all
        Satisfy any
        Require valid-user
        </FilesMatch>"

        echo "Writing .htpasswd file to ${HTPASSWD_FILE_PATH}"
        # Using printf for safer writing of potentially complex string content
        printf "%s\n" "${HTPASSWD_CONTENT}" > "${HTPASSWD_FILE_PATH}"

        echo "Updating .htaccess file at ${HTACCESS_FILE_PATH}"
        if [[ -f "${HTACCESS_FILE_PATH}" ]]; then
          # Prepend the auth config to the existing .htaccess content
          EXISTING_HTACCESS_CONTENT=$(cat "${HTACCESS_FILE_PATH}")
          # Use a temporary file to ensure atomic update and handle special characters
          TMP_HTACCESS_FILE=$(mktemp)
          echo -e "${HTACCESS_AUTH_CONFIG}\n\n${EXISTING_HTACCESS_CONTENT}" > "${TMP_HTACCESS_FILE}"
          mv "${TMP_HTACCESS_FILE}" "${HTACCESS_FILE_PATH}"
          echo ".htaccess updated by prepending auth rules."
        else
          # Create a new .htaccess file with the auth config
          echo -e "${HTACCESS_AUTH_CONFIG}" > "${HTACCESS_FILE_PATH}"
          echo ".htaccess created with auth rules."
        fi
        echo "HTTP Basic Auth configuration complete."

    - name: Install rsync (for SSH deploy)
      if: inputs.deploy-mode == 'ssh'
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y rsync

    - name: Install SSH Key (for SSH deploy)
      if: inputs.deploy-mode == 'ssh'
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ inputs.server-ssh-key }}
        name: 'id_rsa' # Default filename for ssh-agent
        known_hosts: ${{ inputs.server-ssh-known-hosts }}
        if_key_exists: 'replace'

    - name: Sync Build to Deployment via SSH
      if: inputs.deploy-mode == 'ssh'
      shell: bash
      env:
        USER: ${{ inputs.server-ssh-user }}
        HOST: ${{ inputs.server-ssh-host }}
        LOCAL_PATH: ${{ env.BUILD_DIR }}
        REMOTE_PATH: ${{ inputs.server-ssh-path }}
      run: |
        echo "Syncing from ${LOCAL_PATH} to ${USER}@${HOST}:${REMOTE_PATH}"
        rsync -rltvch --delete --compress --chmod=D2755,F644 -e "ssh -vv" \
          "${LOCAL_PATH}" "${USER}@${HOST}:${REMOTE_PATH}"

    - name: Sync Build to Deployment via FTP
      if: inputs.deploy-mode == 'ftp'
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ inputs.server-ftp-host }}
        username: ${{ inputs.server-ftp-user }}
        password: ${{ inputs.server-ftp-password }}
        local-dir: '${{ env.BUILD_DIR }}'
        server-dir: '${{ inputs.server-ftp-path }}/'
        dry-run: ${{ inputs.server-ftp-dry-run }}
